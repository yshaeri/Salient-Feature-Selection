# Autogenerated with SMOP 
from smop.core import *; # boundaryplot2d.m

    
@function
def boundaryplot2d(data=None,labels=None,coeff=None):

    Label_set = np.unique(labels)
    Nclass = len(Label_set);
    depth  = int(np.ceil(np.log2(Nclass)));

    xmin=min(data[:,0]);
    xmax=max(data[:,0]);
    ymin=min(data[:,1]);
    ymax=max(data[:,1]);

    C = np.zeros((2,4));

    A = np.array([coeff[1][0][:2],[1,0]]);
    B = [-coeff[1][0][2], xmin];
    C[:,0] = np.dot(np.linalg.inv(A),B);
    B = [-coeff[1][0][2], xmax];
    C[:,1] = np.dot(np.linalg.inv(A),B);

    A = np.array([coeff[1][0][:2],[0,1]]);
    B = [-coeff[1][0][2], ymin];
    C[:,2] = np.dot(np.linalg.inv(A),B);
    B = [-coeff[1][0][2], ymax];
    C[:,3] = np.dot(np.linalg.inv(A),B);

    C=C.T;








    idx=find(C[:,1] <= logical_and(xmax,C[:,1]) >= logical_and(xmin,C[:,2]) <= logical_and(ymax,C[:,2]) >= ymin); # boundaryplot2d.m:25
    plot(C[idx,1],C[idx,2],'k')
    hold('on')
    clear('C')
    if depth == 1:
        return
    
    for idepth in arange(2,depth).reshape(-1):
        for i in arange(1,2 ** (idepth - 1)).reshape(-1):
            if sum(coeff[idepth](i,arange()) != 0) != 0:
                iparent=copy(i); # boundaryplot2d.m:37
                for j in arange(1,idepth - 1).reshape(-1):
                    iparent=ceil(iparent / 2); # boundaryplot2d.m:39
                    A=matlabarray(cat([coeff[idepth](i,arange(1,2))],[coeff[idepth - j](iparent,arange(1,2))])); # boundaryplot2d.m:40
                    B=matlabarray(cat([- coeff[idepth](i,3)],[- coeff[idepth - j](iparent,3)])); # boundaryplot2d.m:41
                    warning('off')
                    C[:,j]=dot(inv(A),B); # boundaryplot2d.m:43
                    warning('on')
                A=matlabarray(cat([coeff[idepth](i,arange(1,2))],[1,0])); # boundaryplot2d.m:47
                B=matlabarray(cat([- coeff[idepth](i,3)],[xmin])); # boundaryplot2d.m:48
                warning('off')
                C=matlabarray(cat(C,dot(inv(A),B))); # boundaryplot2d.m:50
                B=matlabarray(cat([- coeff[idepth](i,3)],[xmax])); # boundaryplot2d.m:51
                C=matlabarray(cat(C,dot(inv(A),B))); # boundaryplot2d.m:52
                A=matlabarray(cat([coeff[idepth](i,arange(1,2))],[0,1])); # boundaryplot2d.m:54
                B=matlabarray(cat([- coeff[idepth](i,3)],[ymin])); # boundaryplot2d.m:55
                C=matlabarray(cat(C,dot(inv(A),B))); # boundaryplot2d.m:56
                B=matlabarray(cat([- coeff[idepth](i,3)],[ymax])); # boundaryplot2d.m:57
                C=matlabarray(cat(C,dot(inv(A),B))); # boundaryplot2d.m:58
                warning('on')
                C=C.T; # boundaryplot2d.m:61
                #             iparent=ceil(i/2);; #             V=C.*repmat(coeff{idepth-1}(iparent,1:2),size(C,1),1);; #             V=(sum(V'))'+coeff{idepth-1}(iparent,3);
                iparent=copy(i); # boundaryplot2d.m:66
                ichild=copy(i); # boundaryplot2d.m:67
                for j in arange(1,idepth - 1).reshape(-1):
                    iparent=ceil(iparent / 2); # boundaryplot2d.m:69
                    V=multiply(C,repmat(coeff[idepth - j](iparent,arange(1,2)),size(C,1),1)); # boundaryplot2d.m:70
                    V=(sum(V.T)).T + coeff[idepth - j](iparent,3); # boundaryplot2d.m:71
                    if mod(ichild,2) == 1:
                        idx=find(V >= 0 - 10 ** (- 6)); # boundaryplot2d.m:73
                        V=V[idx]; # boundaryplot2d.m:74
                        C=C[idx,:]; # boundaryplot2d.m:75
                    else:
                        idx=find(V <= 0 + 10 ** (- 6)); # boundaryplot2d.m:77
                        V=V[idx]; # boundaryplot2d.m:78
                        C=C[idx,:]; # boundaryplot2d.m:79
                    ichild=ceil(ichild / 2); # boundaryplot2d.m:81
                idx=find(C[:,1] <= logical_and(xmax,C[:,1]) >= logical_and(xmin,C[:,2]) <= logical_and(ymax,C[:,2]) >= ymin); # boundaryplot2d.m:84
                V=V[idx]; # boundaryplot2d.m:85
                C=C[idx,:]; # boundaryplot2d.m:86
                #             V(1)=[];
                if mod(i,2) == 1:
                    V,idx=sort(V,nargout=2); # boundaryplot2d.m:90
                    C=C[idx[1:2],:]; # boundaryplot2d.m:91
                else:
                    V,idx=sort(V,'descend',nargout=2); # boundaryplot2d.m:93
                    C=C[idx[1:2],:]; # boundaryplot2d.m:94
                #             idx=idx+1;; #             idx=idx(1);; #             C=[C(1,:); C(idx,:)];
                plot(C[:,1],C[:,2],'k')
                clear('C')
    
